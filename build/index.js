"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _junitReportBuilder = _interopRequireDefault(require("junit-report-builder"));

var _reporter = _interopRequireDefault(require("@wdio/reporter"));

var _utils = require("./utils");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class JunitV5Reporter extends _reporter.default {
  constructor(options) {
    super(options);
    this.suiteNameRegEx = this.options.suiteNameFormat instanceof RegExp ? this.options.suiteNameFormat : /[^a-zA-Z0-9]+/;
  }

  onRunnerEnd(runner) {
    const xml = this.prepareXml(runner);
    this.write(xml);
  }

  prepareName(name = 'Skipped test') {
    return name.split(this.suiteNameRegEx).filter(item => item && item.length).join(' ');
  }

  prepareXml(runner) {
    const builder = _junitReportBuilder.default.newBuilder();

    const packageName = this.options.packageName ? `${runner.sanitizedCapabilities}-${this.options.packageName}` : runner.sanitizedCapabilities;

    for (let specId of Object.keys(runner.specs)) {
      for (let suiteKey of Object.keys(this.suites)) {
        /**
         * ignore root before all
         */

        /* istanbul ignore if  */
        if (suiteKey.match(/^"before all"/)) {
          continue;
        }

        const suite = this.suites[suiteKey];
        const suiteName = this.prepareName(suite.title);
        const testSuite = builder.testSuite().name(suiteName).timestamp(suite.start).time(suite._duration / 1000).property('specId', specId).property('suiteName', suite.title).property('capabilities', runner.sanitizedCapabilities).property('file', runner.specs[0].replace(process.cwd(), '.'));

        for (let testKey of Object.keys(suite.tests)) {
          if (testKey !== 'undefined') {
            // fix cucumber hooks crashing reporter
            const test = suite.tests[testKey];
            const testName = this.prepareName(test.title);
            const testCase = testSuite.testCase().className(`${packageName}.${suiteName}`).name(testName).time(test._duration / 1000);

            if (test.state === 'pending' || test.state === 'skipped') {
              testCase.skipped();
            }

            if (test.error) {
              const errorOptions = this.options.errorOptions;

              if (errorOptions) {
                for (const key of Object.keys(errorOptions)) {
                  testCase[key](test.error[errorOptions[key]]);
                }
              } else {
                // default
                testCase.error(test.error.message);
              }

              testCase.standardError(`\n${test.error.stack}\n`);
            }

            const output = this.getStandardOutput(test);
            if (output) testCase.standardOutput(`\n${output}\n`);
          }
        }
      }
    }

    return builder.build();
  }

  getStandardOutput(test) {
    let standardOutput = [];
    test.output.forEach(data => {
      switch (data.type) {
        case 'command':
          standardOutput.push(`COMMAND: ${data.method.toUpperCase()} ` + `${data.endpoint.replace(':sessionId', data.sessionId)} - ${this.format(data.body)}`);
          break;

        case 'result':
          standardOutput.push(`RESULT: ${this.format(data.body)}`);
          break;
      }
    });
    return standardOutput.length ? standardOutput.join('\n') : '';
  }

  format(val) {
    return JSON.stringify((0, _utils.limit)(val));
  }

}

var _default = JunitV5Reporter;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJKdW5pdFY1UmVwb3J0ZXIiLCJXRElPUmVwb3J0ZXIiLCJjb25zdHJ1Y3RvciIsIm9wdGlvbnMiLCJzdWl0ZU5hbWVSZWdFeCIsInN1aXRlTmFtZUZvcm1hdCIsIlJlZ0V4cCIsIm9uUnVubmVyRW5kIiwicnVubmVyIiwieG1sIiwicHJlcGFyZVhtbCIsIndyaXRlIiwicHJlcGFyZU5hbWUiLCJuYW1lIiwic3BsaXQiLCJmaWx0ZXIiLCJpdGVtIiwibGVuZ3RoIiwiam9pbiIsImJ1aWxkZXIiLCJqdW5pdCIsIm5ld0J1aWxkZXIiLCJwYWNrYWdlTmFtZSIsInNhbml0aXplZENhcGFiaWxpdGllcyIsInNwZWNJZCIsIk9iamVjdCIsImtleXMiLCJzcGVjcyIsInN1aXRlS2V5Iiwic3VpdGVzIiwibWF0Y2giLCJzdWl0ZSIsInN1aXRlTmFtZSIsInRpdGxlIiwidGVzdFN1aXRlIiwidGltZXN0YW1wIiwic3RhcnQiLCJ0aW1lIiwiX2R1cmF0aW9uIiwicHJvcGVydHkiLCJyZXBsYWNlIiwicHJvY2VzcyIsImN3ZCIsInRlc3RLZXkiLCJ0ZXN0cyIsInRlc3QiLCJ0ZXN0TmFtZSIsInRlc3RDYXNlIiwiY2xhc3NOYW1lIiwic3RhdGUiLCJza2lwcGVkIiwiZXJyb3IiLCJlcnJvck9wdGlvbnMiLCJrZXkiLCJtZXNzYWdlIiwic3RhbmRhcmRFcnJvciIsInN0YWNrIiwib3V0cHV0IiwiZ2V0U3RhbmRhcmRPdXRwdXQiLCJzdGFuZGFyZE91dHB1dCIsImJ1aWxkIiwiZm9yRWFjaCIsImRhdGEiLCJ0eXBlIiwicHVzaCIsIm1ldGhvZCIsInRvVXBwZXJDYXNlIiwiZW5kcG9pbnQiLCJzZXNzaW9uSWQiLCJmb3JtYXQiLCJib2R5IiwidmFsIiwiSlNPTiIsInN0cmluZ2lmeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBRUE7Ozs7QUFFQSxNQUFNQSxlQUFOLFNBQThCQyxpQkFBOUIsQ0FBMkM7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WUFBV0YsSUFBSSxDQUFDRyxNQUFMLENBQVlDLFdBQVosRUFBMEIsR0FBdEMsR0FDQyxHQUFFSixJQUFJLENBQUNLLFFBQUwsQ0FBYzNCLE9BQWQsQ0FBc0IsWUFBdEIsRUFBb0NzQixJQUFJLENBQUNNLFNBQXpDLENBQW9ELE1BQUssS0FBS0MsTUFBTCxDQUFZUCxJQUFJLENBQUNRLElBQWpCLENBQXVCLEVBRnZGO0FBSUE7O0FBQ0osYUFBSyxRQUFMO0FBQ0lYLFVBQUFBLGNBQWMsQ0FBQ0ssSUFBZixDQUFxQixXQUFVLEtBQUtLLE1BQUwsQ0FBWVAsSUFBSSxDQUFDUSxJQUFqQixDQUF1QixFQUF0RDtBQUNBO0FBVEo7QUFXSCxLQVpEO0FBYUEsV0FBT1gsY0FBYyxDQUFDMUMsTUFBZixHQUF3QjBDLGNBQWMsQ0FBQ3pDLElBQWYsQ0FBb0IsSUFBcEIsQ0FBeEIsR0FBb0QsRUFBM0Q7QUFDSDs7QUFFRG1ELEVBQUFBLE1BQU0sQ0FBRUUsR0FBRixFQUFPO0FBQ1QsV0FBT0MsSUFBSSxDQUFDQyxTQUFMLENBQWUsa0JBQU1GLEdBQU4sQ0FBZixDQUFQO0FBQ0g7O0FBdEdzQzs7ZUF5RzVCdkUsZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBqdW5pdCBmcm9tICdqdW5pdC1yZXBvcnQtYnVpbGRlcidcclxuaW1wb3J0IFdESU9SZXBvcnRlciBmcm9tICdAd2Rpby9yZXBvcnRlcidcclxuXHJcbmltcG9ydCB7IGxpbWl0IH0gZnJvbSAnLi91dGlscydcclxuXHJcbmNsYXNzIEp1bml0VjVSZXBvcnRlciBleHRlbmRzIFdESU9SZXBvcnRlciB7XHJcbiAgICBjb25zdHJ1Y3RvciAob3B0aW9ucykge1xyXG4gICAgICAgIHN1cGVyKG9wdGlvbnMpXHJcbiAgICAgICAgdGhpcy5zdWl0ZU5hbWVSZWdFeCA9IHRoaXMub3B0aW9ucy5zdWl0ZU5hbWVGb3JtYXQgaW5zdGFuY2VvZiBSZWdFeHBcclxuICAgICAgICAgICAgPyB0aGlzLm9wdGlvbnMuc3VpdGVOYW1lRm9ybWF0XHJcbiAgICAgICAgICAgIDogL1teYS16QS1aMC05XSsvXHJcbiAgICB9XHJcblxyXG4gICAgb25SdW5uZXJFbmQgKHJ1bm5lcikge1xyXG4gICAgICAgIGNvbnN0IHhtbCA9IHRoaXMucHJlcGFyZVhtbChydW5uZXIpXHJcbiAgICAgICAgdGhpcy53cml0ZSh4bWwpXHJcbiAgICB9XHJcblxyXG4gICAgcHJlcGFyZU5hbWUgKG5hbWUgPSAnU2tpcHBlZCB0ZXN0Jykge1xyXG4gICAgICAgIHJldHVybiBuYW1lLnNwbGl0KHRoaXMuc3VpdGVOYW1lUmVnRXgpLmZpbHRlcihcclxuICAgICAgICAgICAgKGl0ZW0pID0+IGl0ZW0gJiYgaXRlbS5sZW5ndGhcclxuICAgICAgICApLmpvaW4oJyAnKVxyXG4gICAgfVxyXG5cclxuICAgIHByZXBhcmVYbWwgKHJ1bm5lcikge1xyXG4gICAgICAgIGNvbnN0IGJ1aWxkZXIgPSBqdW5pdC5uZXdCdWlsZGVyKClcclxuXHJcbiAgICAgICAgY29uc3QgcGFja2FnZU5hbWUgPSB0aGlzLm9wdGlvbnMucGFja2FnZU5hbWVcclxuICAgICAgICAgICAgPyBgJHtydW5uZXIuc2FuaXRpemVkQ2FwYWJpbGl0aWVzfS0ke3RoaXMub3B0aW9ucy5wYWNrYWdlTmFtZX1gXHJcbiAgICAgICAgICAgIDogcnVubmVyLnNhbml0aXplZENhcGFiaWxpdGllc1xyXG5cclxuICAgICAgICBmb3IgKGxldCBzcGVjSWQgb2YgT2JqZWN0LmtleXMocnVubmVyLnNwZWNzKSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBzdWl0ZUtleSBvZiBPYmplY3Qua2V5cyh0aGlzLnN1aXRlcykpIHtcclxuICAgICAgICAgICAgICAgIC8qKlxyXG4gICAgICAgICAgICAgICAgICogaWdub3JlIHJvb3QgYmVmb3JlIGFsbFxyXG4gICAgICAgICAgICAgICAgICovXHJcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXHJcbiAgICAgICAgICAgICAgICBpZiAoc3VpdGVLZXkubWF0Y2goL15cImJlZm9yZSBhbGxcIi8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWVcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzdWl0ZSA9IHRoaXMuc3VpdGVzW3N1aXRlS2V5XVxyXG4gICAgICAgICAgICAgICAgY29uc3Qgc3VpdGVOYW1lID0gdGhpcy5wcmVwYXJlTmFtZShzdWl0ZS50aXRsZSlcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRlc3RTdWl0ZSA9IGJ1aWxkZXIudGVzdFN1aXRlKClcclxuICAgICAgICAgICAgICAgICAgICAubmFtZShzdWl0ZU5hbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRpbWVzdGFtcChzdWl0ZS5zdGFydClcclxuICAgICAgICAgICAgICAgICAgICAudGltZShzdWl0ZS5fZHVyYXRpb24gLyAxMDAwKVxyXG4gICAgICAgICAgICAgICAgICAgIC5wcm9wZXJ0eSgnc3BlY0lkJywgc3BlY0lkKVxyXG4gICAgICAgICAgICAgICAgICAgIC5wcm9wZXJ0eSgnc3VpdGVOYW1lJywgc3VpdGUudGl0bGUpXHJcbiAgICAgICAgICAgICAgICAgICAgLnByb3BlcnR5KCdjYXBhYmlsaXRpZXMnLCBydW5uZXIuc2FuaXRpemVkQ2FwYWJpbGl0aWVzKVxyXG4gICAgICAgICAgICAgICAgICAgIC5wcm9wZXJ0eSgnZmlsZScsIHJ1bm5lci5zcGVjc1swXS5yZXBsYWNlKHByb2Nlc3MuY3dkKCksICcuJykpXHJcblxyXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgdGVzdEtleSBvZiBPYmplY3Qua2V5cyhzdWl0ZS50ZXN0cykpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdEtleSAhPT0gJ3VuZGVmaW5lZCcpIHsgLy8gZml4IGN1Y3VtYmVyIGhvb2tzIGNyYXNoaW5nIHJlcG9ydGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHRlc3QgPSBzdWl0ZS50ZXN0c1t0ZXN0S2V5XVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXN0TmFtZSA9IHRoaXMucHJlcGFyZU5hbWUodGVzdC50aXRsZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdGVzdENhc2UgPSB0ZXN0U3VpdGUudGVzdENhc2UoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLmNsYXNzTmFtZShgJHtwYWNrYWdlTmFtZX0uJHtzdWl0ZU5hbWV9YClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5uYW1lKHRlc3ROYW1lKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRpbWUodGVzdC5fZHVyYXRpb24gLyAxMDAwKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3Quc3RhdGUgPT09ICdwZW5kaW5nJyB8fCB0ZXN0LnN0YXRlID09PSAnc2tpcHBlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RDYXNlLnNraXBwZWQoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGVzdC5lcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgZXJyb3JPcHRpb25zID0gdGhpcy5vcHRpb25zLmVycm9yT3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVycm9yT3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKGVycm9yT3B0aW9ucykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdENhc2Vba2V5XSh0ZXN0LmVycm9yW2Vycm9yT3B0aW9uc1trZXldXSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGRlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0Q2FzZS5lcnJvcih0ZXN0LmVycm9yLm1lc3NhZ2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0Q2FzZS5zdGFuZGFyZEVycm9yKGBcXG4ke3Rlc3QuZXJyb3Iuc3RhY2t9XFxuYClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgb3V0cHV0ID0gdGhpcy5nZXRTdGFuZGFyZE91dHB1dCh0ZXN0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3V0cHV0KSB0ZXN0Q2FzZS5zdGFuZGFyZE91dHB1dChgXFxuJHtvdXRwdXR9XFxuYClcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGJ1aWxkZXIuYnVpbGQoKVxyXG4gICAgfVxyXG5cclxuICAgIGdldFN0YW5kYXJkT3V0cHV0ICh0ZXN0KSB7XHJcbiAgICAgICAgbGV0IHN0YW5kYXJkT3V0cHV0ID0gW11cclxuICAgICAgICB0ZXN0Lm91dHB1dC5mb3JFYWNoKChkYXRhKSA9PiB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAoZGF0YS50eXBlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgJ2NvbW1hbmQnOlxyXG4gICAgICAgICAgICAgICAgc3RhbmRhcmRPdXRwdXQucHVzaChcclxuICAgICAgICAgICAgICAgICAgICBgQ09NTUFORDogJHtkYXRhLm1ldGhvZC50b1VwcGVyQ2FzZSgpfSBgICtcclxuICAgICAgICAgICAgICAgICAgICBgJHtkYXRhLmVuZHBvaW50LnJlcGxhY2UoJzpzZXNzaW9uSWQnLCBkYXRhLnNlc3Npb25JZCl9IC0gJHt0aGlzLmZvcm1hdChkYXRhLmJvZHkpfWBcclxuICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgIGJyZWFrXHJcbiAgICAgICAgICAgIGNhc2UgJ3Jlc3VsdCc6XHJcbiAgICAgICAgICAgICAgICBzdGFuZGFyZE91dHB1dC5wdXNoKGBSRVNVTFQ6ICR7dGhpcy5mb3JtYXQoZGF0YS5ib2R5KX1gKVxyXG4gICAgICAgICAgICAgICAgYnJlYWtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcmV0dXJuIHN0YW5kYXJkT3V0cHV0Lmxlbmd0aCA/IHN0YW5kYXJkT3V0cHV0LmpvaW4oJ1xcbicpIDogJydcclxuICAgIH1cclxuXHJcbiAgICBmb3JtYXQgKHZhbCkge1xyXG4gICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShsaW1pdCh2YWwpKVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBKdW5pdFY1UmVwb3J0ZXJcclxuIl19