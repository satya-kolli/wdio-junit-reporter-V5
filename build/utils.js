"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.limit = void 0;

require("source-map-support/register");

var _jsonStringifySafe = _interopRequireDefault(require("json-stringify-safe"));

var _validator = _interopRequireDefault(require("validator"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const OBJLENGTH = 10;
const ARRLENGTH = 10;
const STRINGLIMIT = 1000;
const STRINGTRUNCATE = 200;

const limit = function (rawVal) {
  if (!rawVal) return rawVal; // Ensure we're working with a copy

  let val = JSON.parse((0, _jsonStringifySafe.default)(rawVal));
  const type = Object.prototype.toString.call(val);

  if (type === '[object String]') {
    if (val.length > 100 && _validator.default.isBase64(val)) {
      return `[base64] ${val.length} bytes`;
    }

    if (val.length > STRINGLIMIT) {
      return val.substr(0, STRINGTRUNCATE) + ` ... (${val.length - STRINGTRUNCATE} more bytes)`;
    }

    return val;
  } else if (type === '[object Array]') {
    const length = val.length;

    if (length > ARRLENGTH) {
      val = val.slice(0, ARRLENGTH);
      val.push(`(${length - ARRLENGTH} more items)`);
    }

    return val.map(limit);
  } else if (type === '[object Object]') {
    const keys = Object.keys(val);
    const removed = [];

    for (let i = 0, l = keys.length; i < l; i++) {
      if (i < OBJLENGTH) {
        val[keys[i]] = limit(val[keys[i]]);
      } else {
        delete val[keys[i]];
        removed.push(keys[i]);
      }
    }

    if (removed.length) {
      val._ = keys.length - OBJLENGTH + ' more keys: ' + JSON.stringify(removed);
    }

    return val;
  }

  return val;
};

exports.limit = limit;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlscy5qcyJdLCJuYW1lcyI6WyJPQkpMRU5HVEgiLCJBUlJMRU5HVEgiLCJTVFJJTkdMSU1JVCIsIlNUUklOR1RSVU5DQVRFIiwibGltaXQiLCJyYXdWYWwiLCJ2YWwiLCJKU09OIiwicGFyc2UiLCJ0eXBlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwibGVuZ3RoIiwidmFsaWRhdG9yIiwiaXNCYXNlNjQiLCJzdWJzdHIiLCJzbGljZSIsInB1c2giLCJtYXAiLCJrZXlzIiwicmVtb3ZlZCIsImkiLCJsIiwiXyIsInN0cmluZ2lmeSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7Ozs7QUFFQSxNQUFNQSxTQUFTLEdBQUcsRUFBbEI7QUFDQSxNQUFNQyxTQUFTLEdBQUcsRUFBbEI7QUFDQSxNQUFNQyxXQUFXLEdBQUcsSUFBcEI7QUFDQSxNQUFNQyxjQUFjLEdBQUcsR0FBdkI7O0FBRU8sTUFBTUMsS0FBSyxHQUFHLFVBQVVDLE1BQVYsRUFBa0I7QUFDbkMsTUFBSSxDQUFDQSxNQUFMLEVBQWEsT0FBT0EsTUFBUCxDQURzQixDQUduQzs7QUFDQSxNQUFJQyxHQUFHLEdBQUdDLElBQUksQ0FBQ0MsS0FBTCxDQUFXLGdDQUFVSCxNQUFWLENBQVgsQ0FBVjtBQUNBLFFBQU1JLElBQUksR0FBR0MsTUFBTSxDQUFDQyxTQUFQLENBQWlCQyxRQUFqQixDQUEwQkMsSUFBMUIsQ0FBK0JQLEdBQS9CLENBQWI7O0FBRUEsTUFBSUcsSUFBSSxLQUFLLGlCQUFiLEVBQWdDO0FBQzVCLFFBQUlILEdBQUcsQ0FBQ1EsTUFBSixHQUFhLEdBQWIsSUFBb0JDLG1CQUFVQyxRQUFWLENBQW1CVixHQUFuQixDQUF4QixFQUFpRDtBQUM3QyxhQUFRLFlBQVdBLEdBQUcsQ0FBQ1EsTUFBTyxRQUE5QjtBQUNIOztBQUVELFFBQUlSLEdBQUcsQ0FBQ1EsTUFBSixHQUFhWixXQUFqQixFQUE4QjtBQUMxQixhQUFPSSxHQUFHLENBQUNXLE1BQUosQ0FBVyxDQUFYLEVBQWNkLGNBQWQsSUFBaUMsU0FBUUcsR0FBRyxDQUFDUSxNQUFKLEdBQWFYLGNBQWUsY0FBNUU7QUFDSDs7QUFFRCxXQUFPRyxHQUFQO0FBQ0gsR0FWRCxNQVVPLElBQUlHLElBQUksS0FBSyxnQkFBYixFQUErQjtBQUNsQyxVQUFNSyxNQUFNLEdBQUdSLEdBQUcsQ0FBQ1EsTUFBbkI7O0FBQ0EsUUFBSUEsTUFBTSxHQUFHYixTQUFiLEVBQXdCO0FBQ3BCSyxNQUFBQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQ1ksS0FBSixDQUFVLENBQVYsRUFBYWpCLFNBQWIsQ0FBTjtBQUNBSyxNQUFBQSxHQUFHLENBQUNhLElBQUosQ0FBVSxJQUFHTCxNQUFNLEdBQUdiLFNBQVUsY0FBaEM7QUFDSDs7QUFDRCxXQUFPSyxHQUFHLENBQUNjLEdBQUosQ0FBUWhCLEtBQVIsQ0FBUDtBQUNILEdBUE0sTUFPQSxJQUFJSyxJQUFJLEtBQUssaUJBQWIsRUFBZ0M7QUFDbkMsVUFBTVksSUFBSSxHQUFHWCxNQUFNLENBQUNXLElBQVAsQ0FBWWYsR0FBWixDQUFiO0FBQ0EsVUFBTWdCLE9BQU8sR0FBRyxFQUFoQjs7QUFDQSxTQUFLLElBQUlDLENBQUMsR0FBRyxDQUFSLEVBQVdDLENBQUMsR0FBR0gsSUFBSSxDQUFDUCxNQUF6QixFQUFpQ1MsQ0FBQyxHQUFHQyxDQUFyQyxFQUF3Q0QsQ0FBQyxFQUF6QyxFQUE2QztBQUN6QyxVQUFJQSxDQUFDLEdBQUd2QixTQUFSLEVBQW1CO0FBQ2ZNLFFBQUFBLEdBQUcsQ0FBQ2UsSUFBSSxDQUFDRSxDQUFELENBQUwsQ0FBSCxHQUFlbkIsS0FBSyxDQUFDRSxHQUFHLENBQUNlLElBQUksQ0FBQ0UsQ0FBRCxDQUFMLENBQUosQ0FBcEI7QUFDSCxPQUZELE1BRU87QUFDSCxlQUFPakIsR0FBRyxDQUFDZSxJQUFJLENBQUNFLENBQUQsQ0FBTCxDQUFWO0FBQ0FELFFBQUFBLE9BQU8sQ0FBQ0gsSUFBUixDQUFhRSxJQUFJLENBQUNFLENBQUQsQ0FBakI7QUFDSDtBQUNKOztBQUNELFFBQUlELE9BQU8sQ0FBQ1IsTUFBWixFQUFvQjtBQUNoQlIsTUFBQUEsR0FBRyxDQUFDbUIsQ0FBSixHQUFTSixJQUFJLENBQUNQLE1BQUwsR0FBY2QsU0FBZixHQUE0QixjQUE1QixHQUE2Q08sSUFBSSxDQUFDbUIsU0FBTCxDQUFlSixPQUFmLENBQXJEO0FBQ0g7O0FBQ0QsV0FBT2hCLEdBQVA7QUFDSDs7QUFDRCxTQUFPQSxHQUFQO0FBQ0gsQ0F6Q00iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgc3RyaW5naWZ5IGZyb20gJ2pzb24tc3RyaW5naWZ5LXNhZmUnXHJcbmltcG9ydCB2YWxpZGF0b3IgZnJvbSAndmFsaWRhdG9yJ1xyXG5cclxuY29uc3QgT0JKTEVOR1RIID0gMTBcclxuY29uc3QgQVJSTEVOR1RIID0gMTBcclxuY29uc3QgU1RSSU5HTElNSVQgPSAxMDAwXHJcbmNvbnN0IFNUUklOR1RSVU5DQVRFID0gMjAwXHJcblxyXG5leHBvcnQgY29uc3QgbGltaXQgPSBmdW5jdGlvbiAocmF3VmFsKSB7XHJcbiAgICBpZiAoIXJhd1ZhbCkgcmV0dXJuIHJhd1ZhbFxyXG5cclxuICAgIC8vIEVuc3VyZSB3ZSdyZSB3b3JraW5nIHdpdGggYSBjb3B5XHJcbiAgICBsZXQgdmFsID0gSlNPTi5wYXJzZShzdHJpbmdpZnkocmF3VmFsKSlcclxuICAgIGNvbnN0IHR5cGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsKVxyXG5cclxuICAgIGlmICh0eXBlID09PSAnW29iamVjdCBTdHJpbmddJykge1xyXG4gICAgICAgIGlmICh2YWwubGVuZ3RoID4gMTAwICYmIHZhbGlkYXRvci5pc0Jhc2U2NCh2YWwpKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBgW2Jhc2U2NF0gJHt2YWwubGVuZ3RofSBieXRlc2BcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh2YWwubGVuZ3RoID4gU1RSSU5HTElNSVQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZhbC5zdWJzdHIoMCwgU1RSSU5HVFJVTkNBVEUpICsgYCAuLi4gKCR7dmFsLmxlbmd0aCAtIFNUUklOR1RSVU5DQVRFfSBtb3JlIGJ5dGVzKWBcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiB2YWxcclxuICAgIH0gZWxzZSBpZiAodHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJykge1xyXG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IHZhbC5sZW5ndGhcclxuICAgICAgICBpZiAobGVuZ3RoID4gQVJSTEVOR1RIKSB7XHJcbiAgICAgICAgICAgIHZhbCA9IHZhbC5zbGljZSgwLCBBUlJMRU5HVEgpXHJcbiAgICAgICAgICAgIHZhbC5wdXNoKGAoJHtsZW5ndGggLSBBUlJMRU5HVEh9IG1vcmUgaXRlbXMpYClcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHZhbC5tYXAobGltaXQpXHJcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdbb2JqZWN0IE9iamVjdF0nKSB7XHJcbiAgICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKHZhbClcclxuICAgICAgICBjb25zdCByZW1vdmVkID0gW11cclxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChpIDwgT0JKTEVOR1RIKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxba2V5c1tpXV0gPSBsaW1pdCh2YWxba2V5c1tpXV0pXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdmFsW2tleXNbaV1dXHJcbiAgICAgICAgICAgICAgICByZW1vdmVkLnB1c2goa2V5c1tpXSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAocmVtb3ZlZC5sZW5ndGgpIHtcclxuICAgICAgICAgICAgdmFsLl8gPSAoa2V5cy5sZW5ndGggLSBPQkpMRU5HVEgpICsgJyBtb3JlIGtleXM6ICcgKyBKU09OLnN0cmluZ2lmeShyZW1vdmVkKVxyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdmFsXHJcbiAgICB9XHJcbiAgICByZXR1cm4gdmFsXHJcbn1cclxuIl19